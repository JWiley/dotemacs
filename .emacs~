;; code to get use-package
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;;(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

;; recommended for flx-ido
(setq gc-cons-threshold 20000000)

;; better images
;; (use-package image+
;;   :ensure t
;;   :config
;;   (imagex-auto-adjust-mode 1))


(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))

(use-package recentf
  :ensure t
  :config
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files))

;; use projectile for project management
(use-package projectile
  :ensure t
  :defer t
  :init
  (projectile-global-mode)
  :config
  (setq projectile-indexing-method 'alien))

(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

(use-package flx
  :ensure t
  :config
  (use-package flx-ido
    :ensure t
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t)
    (setq ido-use-faces nil)
    )
  )

;; company mode for auto-completion
(use-package company
  :ensure t
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (setq company-idle-delay 0.0 ;; delay before pop-up
	company-require-match nil) ;; cancel if input doesn't match
  ;; complete using C-TAB
  (global-set-key (kbd "<C-tab>") 'company-complete)
  ;; use C-n and C-p to cycle through completions
  (define-key company-mode-map (kbd "<C-tab>") 'company-complete)
  ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
  ;; (define-key company-active-map (kbd "<tab>") 'company-complete-common)
  ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
  ;; (define-key company-active-map (kbd "<backtab>") 'company-select-previous)

  (require 'company-capf)
  (setq company-backends
	(delete-dups (cons 'company-capf company-backends)))

  ;; theme
  (set-face-attribute 'company-scrollbar-bg nil
		      :background "gray")
  (set-face-attribute 'company-scrollbar-fg nil
		      :background "black")
  (set-face-attribute 'company-tooltip nil
		      :foreground "black"
		      :background "lightgray")
  (set-face-attribute 'company-tooltip-selection nil
		      :foreground "white"
		      :background "steelblue")
  (add-hook 'after-init-hook 'global-company-mode)
  )

(use-package folding
  :ensure t
  :config
  (folding-add-to-marks-list 'ess-mode "##{{{" "##}}}" nil t)
  (add-hook 'ess-mode-hook 'turn-on-folding-mode)
  (global-set-key [f9] 'folding-hide-current-entry)
  (global-set-key [f10] 'folding-show-current-entry))

(use-package yasnippet
  :ensure t
  :init
  (yas-global-mode 1))

(use-package poly-markdown
  :ensure t)

(use-package poly-R
  :ensure t)

(use-package poly-noweb
  :ensure t)


(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-move-forward-on-expand        nil
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-user-header-line-format       nil
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))



;; ;; use anaconda-mode for python
;; (use-package anaconda-mode
;;   :ensure t)
;; ;; use pyvenv for virtual environments
;; (use-package pyvenv
;;   :ensure t)
;; (add-hook 'python-mode-hook 'anaconda-mode)
;; (setenv "WORKON_HOME" "c:/usr/Anaconda3/envs/")
;; (pyvenv-mode 1)

;;; setup org-mode and org-babel
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)))

;; fontify code in code blocks
(setq org-src-fontify-natively t)

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-display-inline-images)

; auto save bookmarks
(setq
   bookmark-default-file "~/OneDrive/.emacs.bmk"
   bookmark-version-control t
   bookmark-save-flag 1)

(defun dos2unix ()
  "Convert a DOS formatted text buffer to UNIX format"
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))

(defun unix2dos ()
  "Convert a UNIX formatted text buffer to DOS format"
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))

(setq inferior-R-program-name "c:/usr/R/R-4.0.2/bin/x64/Rterm.exe")
(setq ess-ask-for-ess-directory nil) ; do not prompt for directory

;; (setq inferior-julia-program-name "C:/usr/julia/julia-d6f7c7c781/bin/julia-basic.exe")


;; Appearance Related Things

(custom-set-faces)

;; show line numbers
(global-linum-mode 1)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
; no tool bar and add column numbers
(tool-bar-mode -1)
(setq column-number-mode t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ess-R-font-lock-keywords
   (quote
    ((ess-R-fl-keyword:modifiers . t)
     (ess-R-fl-keyword:fun-defs . t)
     (ess-R-fl-keyword:keywords . t)
     (ess-R-fl-keyword:assign-ops . t)
     (ess-R-fl-keyword:constants . t)
     (ess-fl-keyword:fun-calls . t)
     (ess-fl-keyword:numbers . t)
     (ess-fl-keyword:operators . t)
     (ess-fl-keyword:delimiters . t)
     (ess-fl-keyword:=)
     (ess-R-fl-keyword:F&T)
     (ess-R-fl-keyword:%op% . t))))

  ;; '(inhibit-startup-screen t)
  ;; '(initial-buffer-choice t)
  ;; '(load-home-init-file t t)
  '(markdown-command "C:/usr/Pandoc/pandoc.exe")  ;; tell it where pandoc is
)


;; ;; sanityinc tomorrow night theme
;; (use-package color-theme-sanityinc-tomorrow
;;   :ensure t)
;; (load-theme 'sanityinc-tomorrow-night t)

;; tron theme
(add-to-list 'custom-theme-load-path "C:/Users/jwile/.emacs.d/themes/")
(load-theme 'tron-legacy t)

(set-face-font 'default "-outline-Consolas-normal-r-normal-normal-*-*-96-96-c-*-iso8859-1")
(set-face-font 'bold "-outline-Consolas-bold-r-normal-normal-*-*-96-96-c-*-iso8859-1")
(set-face-font 'italic "-outline-Consolas-normal-i-normal-normal-*-*-96-96-c-*-iso8859-1")
(set-face-font 'bold-italic "-outline-Consolas-bold-i-normal-normal-*-*-96-96-c-*-iso8859-1")

(add-to-list 'ess-style-alist
             '(my-style
               (ess-indent-level . 2)
               ;; (ess-first-continued-statement-offset . 2)
               ;; (ess-continued-statement-offset . 0)
               ;; (ess-brace-offset . -2)
               ;; (ess-expression-offset . 2)
               ;; (ess-else-offset . 0)
               ;; (ess-close-brace-offset . 0)
               ;; (ess-brace-imaginary-offset . 0)
               ;; (ess-continued-brace-offset . 0)
               ;; (ess-arg-function-offset . 2)
	       ;; (ess-arg-function-offset-new-line . '(2))
               ))

(setq ess-default-style 'my-style)

;; ;; save files and configuration for nice restarting?
;; (desktop-save-mode 1)

;; ;; emaccs server supposed to reduce startup and shut down time but not much success
;; (require 'server)
;; (unless (server-running-p)
;;   (server-start))

;; (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown-mode))
;; (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))

;; turn on flyspell checking by default
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)

;; https://stackoverflow.com/questions/53659626/how-do-i-run-spell-check-on-an-rmarkdown-document-in-emacs-ess
;; (add-to-list 'ispell-skip-region-alist '("^```" . "```$"))
